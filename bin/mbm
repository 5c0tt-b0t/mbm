#!/bin/bash

VERSION="0.2"

PROGRAM="${0##*/}"

BMDIR=$HOME/.bookmarks
CACHEDIR=$BMDIR/cache
list=$BMDIR/list

mkdir -p $BMDIR
mkdir -p $CACHEDIR
touch $list

open() {
  #extract the last url found and open it
  search ${*:2} | awk -F '|' '{print $1}'
  url=`search ${*:2} | awk -F '|' '{print $1}' | tail -1`
  if [ -x $url ]
    then
      echo no matching url found
    else
      echo opening "$url"
      xdg-open "$url"
  fi
}

add(){

  [[ -d $BMDIR/.git ]] || git -C $BMDIR init
  
  overwrite=lulz
  url=$2
  #lowercase tags to reduce duplicate categories
  tags=${@:3}
  tags=${tags,,}
  
  count=$(grep "$url |" "$list" | wc -l)
  if [ $count -gt 0 ]
    then
    read -p "$url already exists, overwrite? y/N " overwrite
  fi

  case $overwrite in
    y|Y)
      echo "**OVERWRITING**"
      over=y
    ;;
    lulz)
    ;;
    n|N|*)
      exit 0
    ;;
  esac

  if [ "$over" = "y" ]
  then
    grep -v "^${url} |" $list > .temp ; mv .temp $list
  fi

  urlforfile=$(echo $url | sed 's/[/?=!:_]/-/g')
  cachefile=$CACHEDIR/${urlforfile}.html
  curl -s $url > $cachefile
  
  title=$(sed -rn 's/.*<title>(.*)<\/title>.*/\1/p' $cachefile)
  read -p "Description (default: $title): " description
  [ -z $description ] && description=$title
  echo "$url | $description | $cachefile | $tags" >> $list
  
  for tag in $tags ; do
    mkdir -p $BMDIR/tags/$tag
    ln -s $cachefile $BMDIR/tags/$tag/${urlforfile}.html
  done
  
  git -C $BMDIR add .
  git -C $BMDIR commit -am "new link $urlforfile"
}

search(){
  terms=$@
  termsforgrep=$(echo $terms | sed 's/ /\\|/g')
  for i in $(grep -li "$termsforgrep" $CACHEDIR/*) ; do
    grep $i $list
  done
  #send the last url found to the clipboard
  #echo -n `grep $i $list | awk -F '|' '{print $1}' | tail -1` | xclip -selection "clipboard"
}

stats(){
  echo
  echo $list has
  echo `wc -l $list | awk '{print $1}'` bookmarks
  echo `ls -C1 $BMDIR/tags | wc -l | awk '{print $1}'` tags: `ls $BMDIR/tags`
  echo
}

list(){
  echo
  cat $list \
    | awk '
    BEGIN { FS = "|" }
    {
      printf "  \033[36m%s\033[0m\n", $1
      printf "  \033[33m%s\033[0m\n", $2
      printf "  \033[90m%s\033[0m\n", $3
      printf "  \033[90m%s\033[0m\n\n", $4
      }'
  echo
}

usage() {
  cat <<EOF

  Usage: $PROGRAM [OPTION] [cmd]

  Commands:

    $ $PROGRAM add <url> [<tags>]
        # add a bookmark with the given url and optional tags
        
    $ $PROGRAM search <query>
	# search the bookmarks via full-text <query>
	# the last url is sent to the clipboard
	
    $ $PROGRAM open <query>
	# search the bookmarks via full-text <query>
	# and open the last url found in the default browser
	
    $ $PROGRAM stats
	# return the amount of bookmarks and tags

    $ $PROGRAM list
        # list all bookmarks

  Options:

     -V, --version   display version information and exit
     -h, --help      display this help information and exit

EOF
}

case "$1" in
  version|-V|--version) echo $PROGRAM $VERSION ;;
  help|-h|--help) usage ;;
  add|insert) add "$@" ;;
  list|show|ls) list ;;
  stats) stats ;;
  open) open "$@" ;;
  grep|search) search ${*:2} ;;
  *) usage ;;
esac

exit 0